from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import logging
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

class UserSession:
    def __init__(self, user_id):
        self.user_id = user_id
        self.bot = None
        self.logs = []
    
    def add_log(self, message):
        self.logs.append(message)
        if len(self.logs) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥–∏
            self.logs.pop(0)
    
    def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            from playwright.sync_api import sync_playwright
            from colorama import init, Fore
            
            init(autoreset=True)
            
            self.bot = type('Bot', (), {})()  # –ó–∞–≥–ª—É—à–∫–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç
            
            self.add_log("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

def get_user_session(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)
        user_sessions[user_id].initialize_bot()
    return user_sessions[user_id]

@app.route('/')
def home():
    return jsonify({"message": "GetCourse Bot API", "status": "running"})

@app.route('/api/health')
def health():
    return jsonify({"status": "healthy", "sessions": len(user_sessions)})

@app.route('/api/command', methods=['POST'])
def handle_command():
    try:
        data = request.get_json()
        command = data.get('command')
        user_id = data.get('user_id', 'default')
        
        logger.info(f"Command received: {command} from user: {user_id}")
        
        user_session = get_user_session(user_id)
        user_session.add_log(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if command == 'go_main':
            user_session.add_log("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return jsonify({"success": True, "message": "–ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"})
        
        elif command == 'login':
            user_session.add_log("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
            return jsonify({"success": True, "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
        
        elif command == 'toggle_monitor':
            user_session.add_log("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–æ–≤")
            return jsonify({"success": True, "message": "–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã"})
        
        elif command == 'take_screenshot':
            user_session.add_log("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω")
            return jsonify({"success": True, "message": "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω"})
        
        elif command == 'show_links':
            user_session.add_log("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫")
            return jsonify({"success": True, "message": "–°—Å—ã–ª–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã"})
        
        elif command == 'show_buttons':
            user_session.add_log("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫")
            return jsonify({"success": True, "message": "–ö–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã"})
        
        else:
            return jsonify({"success": False, "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"})
            
    except Exception as e:
        logger.error(f"Error handling command: {str(e)}")
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route('/api/logs/<user_id>')
def get_logs(user_id):
    user_session = get_user_session(user_id)
    return jsonify({"logs": user_session.logs})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)